{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "B Language",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#anon_pattern_1"
    },
    {
      "include": "#labels"
    },
    {
      "include": "#storage_types"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#block"
    },
    {
      "include": "#parens"
    },
    {
      "include": "#function"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#vector_modify"
    },
    {
      "include": "#comma"
    },
    {
      "include": "#semicolon"
    }
  ],
  "repository": {
    "anon_pattern_1": {
      "match": "\\b(else|goto|if|return|while)\\b",
      "name": "keyword.control.c"
    },
    "labels": {
      "patterns": [
        {
          "match": "^\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*:",
          "captures": {
            "1": {
              "name": "entity.name.label.b"
            }
          }
        }
      ]
    },
    "b_function_call": {
      "begin": "(?x)\n(?!(?:switch|case|else|if|while|return|goto|auto|extrn)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+)++\\s*\\(  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
      "beginCaptures": {
        "1": { "name": "entity.name.function.b" }
      },
      "end": "(?<=\\))(?!\\s*\\{)(?!\\w)",
      "name": "meta.function-call.b",
      "patterns": [
        {
          "include": "#function-call-innards"
        }
      ]
    },
    "function-call-innards": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#storage_types"
        },
        {
          "include": "#operators"
        },
        {
          "begin": "(?x)\n(?!(?:extrn|return|switch|case|goto|else|auto|if)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.c"
            },
            "2": {
              "name": "punctuation.section.arguments.begin.bracket.round.c"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.arguments.end.bracket.round.c"
            }
          },
          "patterns": [
            {
              "include": "#function-call-innards"
            }
          ]
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.c"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.c"
            }
          },
          "patterns": [
            {
              "include": "#function-call-innards"
            }
          ]
        },
        {
          "include": "#variables"
        },
        {
          "include": "#block_innards"
        }
      ]
    },
    "parens-block": {
      "name": "meta.parens.block.c",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.bracket.round.c"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.bracket.round.c"
        }
      },
      "patterns": [
        {
          "include": "#block_innards"
        },
        {
          "include": "#variables"
        },
        {
          "match": "(?-mix:(?<!:):(?!:))",
          "name": "punctuation.range-based.c"
        }
      ]
    },
    "block": {
      "begin": "{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.block.begin.bracket.curly.c"
        }
      },
      "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.block.end.bracket.curly.c"
        }
      },
      "name": "meta.block.c",
      "patterns": [
        {
          "include": "#block_innards"
        }
      ]
    },
    "storage_types": {
      "patterns": [
        {
          "match": "(?-mix:\\b(auto|extrn)\\b)",
          "name": "storage.type.$1.c"
        }
      ]
    },
    "variable_declaration": {
      "patterns": [
        {
          "match": "\\b(auto|extrn)\\s+([a-zA-Z_][a-zA-Z0-9_]*(?:\\s*,\\s*[a-zA-Z_][a-zA-Z0-9_]*)*)\\s*;",
          "captures": {
            "1": {
              "name": "storage.type.b"
            },
            "2": {
              "patterns": [
                {
                  "match": "[a-zA-Z_][a-zA-Z0-9_]*",
                  "name": "variable.declaration.b"
                }
              ]
            }
          }
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "include": "#variable_declaration"
        },
        {
          "match": "\\b(?!(?:auto|extrn|if|else|while|goto|return|case|switch|main)\\b)[a-zA-Z_][a-zA-Z0-9_]*\\b(?!\\s*\\()",
          "name": "variable.other.b"
        }
      ]
    },
    "block_innards": {
      "patterns": [
        {
          "include": "#b_function_call"
        },
        {
          "name": "meta.initialization.c",
          "begin": "(?x)\n(?:\n  (?:\n\t(?=\\s)(?<!else|new|return)\n\t(?<=\\w) \\s+(and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)  # or word + space before name\n  )\n)\n(\n  (?:[A-Za-z_][A-Za-z0-9_]*+ | :: )++   # actual name\n  |\n  (?:(?<=operator) (?:[-*&<>=+!]+ | \\(\\) | \\[\\]))\n)\n\\s*(\\() # opening bracket",
          "beginCaptures": {
            "1": {
              "name": "variable.other.c"
            },
            "2": {
              "name": "punctuation.section.parens.begin.bracket.round.initialization.c"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.initialization.c"
            }
          },
          "patterns": [
            {
              "include": "#function-call-innards"
            }
          ]
        },
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.c"
            }
          },
          "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.c"
            }
          },
          "patterns": [
            {
              "include": "#block_innards"
            }
          ]
        },
        {
          "include": "#vector_access"
        },
        {
          "include": "#variables"
        },
        {
          "include": "#parens-block"
        },
        {
          "include": "$self"
        }
      ]
    },
    "function": {
      "name": "meta.function.c",
      "begin": "(?<!\\w)(?!\\s*(?:extrn|return|switch|case|goto|else|auto|if)\\s*\\()(?=[a-zA-Z_]\\w*\\s*\\()",
      "end": "(?!\\G)(?<=\\))",
      "patterns": [
        {
          "include": "#function-innards"
        }
      ]
    },
    "probably_a_parameter": {
      "match": "\\s*([a-zA-Z_]\\w*)\\s*(?=(?:\\[\\]\\s*)?(?:,|\\)))",
      "captures": {
        "1": {
          "name": "variable.parameter.probably.c"
        }
      }
    },
    "function-innards": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#storage_types"
        },
        {
          "include": "#operators"
        },
        {
          "name": "meta.function.definition.parameters.c",
          "begin": "(?x)\n(?!(?:auto|extrn|if|else|while|switch|goto|return|case)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.c"
            },
            "2": {
              "name": "punctuation.section.parameters.begin.bracket.round.c"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parameters.end.bracket.round.c"
            }
          },
          "patterns": [
            {
              "include": "#probably_a_parameter"
            },
            {
              "include": "#function-innards"
            }
          ]
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.block.b",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            {
              "name": "comment.block.b",
              "match": "."
            }
          ]
        }
      ]
    },
    "vector_modify": {
      "name": "storage.modifier.array.bracket.square.c",
      "match": "\\[\\s*\\]"
    },
    "vector_access": {
      "name": "meta.bracket.square.access.c",
      "begin": "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))?(\\[)(?!\\])",
      "beginCaptures": {
        "1": {
          "name": "variable.object.c"
        },
        "2": {
          "name": "punctuation.definition.begin.bracket.square.c"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.end.bracket.square.c"
        }
      },
      "patterns": [
        {
          "include": "#function-call-innards"
        }
      ]
    },
    "string_escaped_char": {
      "patterns": [
        {
          "match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
          "name": "constant.character.escape.c"
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.unknown-escape.c"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.b"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.b"
            }
          },
          "name": "string.quoted.double.b",
          "patterns": [
            {
              "name": "constant.character.format.placeholder.b",
              "match": "(?x) %\n(\\d+\\$)?\t\t\t\t\t\t   # field (argument #)\n[#0\\- +']*\t\t\t\t\t\t  # flags\n[,;:_]?\t\t\t\t\t\t\t  # separator character (AltiVec)\n((-?\\d+)|\\*(-?\\d+\\$)?)?\t\t  # minimum field width\n(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?\t# precision\n(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n[diouxXDOUeEfFgGaACcSspn%]\t\t   # conversion type"
            },
            {
              "name": "constant.character.escape.b",
              "match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3][0-7]{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )"
            },
            {
              "match": "\\\\.",
              "name": "invalid.illegal.unknown-escape.b"
            }
          ]
        },
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c"
            }
          },
          "name": "string.quoted.single.c",
          "patterns": [
            {
              "include": "#string_escaped_char"
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.integer.b",
          "match": "-?[0-9]+"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.compound.b",
          "match": "(=\\||=<<|=>>|=-|=\\+|=%|=\\*|=/)"
        },
        {
          "name": "keyword.operator.assignment.b",
          "match": "="
        },
        {
          "name": "keyword.operator.comparison.b",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.bitwise.b",
          "match": "(<<|>>|\\||&)"
        },
        {
          "name": "keyword.operator.arithmetic.b",
          "match": "(\\+\\+|--|\\+|-|\\*|/|%)"
        },
        {
          "name": "keyword.operator.logical.b",
          "match": "!"
        }
      ]
    },
    "comma": {
      "name": "punctuation.separator.comma.b",
      "match": ","
    },
    "semicolon": {
      "name": "punctuation.terminator.statement.b",
      "match": ";"
    }
  },
  "scopeName": "source.b"
}
